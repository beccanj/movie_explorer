{
    "sourceFile": "src/hooks/useVisitorStats.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1752660048620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752660119734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useEffect, useState } from \"react\";\r\n-import { getVisitorStats } from \"../services/visitorservice\";\r\n+import { getDashboardStatistics } from \"../services/visitorservice\";\r\n \r\n const useVisitorStats = () => {\r\n   const [stats, setStats] = useState(null);\r\n   const [loading, setLoading] = useState(true);\r\n"
                },
                {
                    "date": 1752660141487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getDashboardStatistics } from \"../services/dashbi\";\r\n+\r\n+const useVisitorStats = () => {\r\n+  const [stats, setStats] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchStats = async () => {\r\n+      try {\r\n+        setLoading(true);\r\n+        const data = await getVisitorStats();\r\n+        setStats(data);\r\n+        setError(null);\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching visitor stats:\", error);\r\n+        if (error.response) {\r\n+          console.error(\"Server responded with:\", error.response.data);\r\n+          setError(\"Server error occurred. Please try again.\");\r\n+        } else {\r\n+          setError(\"Something went wrong. Please check your connection.\");\r\n+        }\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchStats();\r\n+  }, []); // Empty dependency array means this runs once on mount\r\n+\r\n+  // Helper function to refresh stats\r\n+  const refreshStats = async () => {\r\n+    try {\r\n+      setLoading(true);\r\n+      const data = await getVisitorStats();\r\n+      setStats(data);\r\n+      setError(null);\r\n+    } catch (error) {\r\n+      console.error(\"Error refreshing visitor stats:\", error);\r\n+      setError(\"Failed to refresh stats\");\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return { \r\n+    stats, \r\n+    loading, \r\n+    error, \r\n+    refreshStats, // Optional: allows manual refresh\r\n+    totalVisitors: stats?.visitors?.total || 0,\r\n+    visitorData: stats?.visitors?.data || []\r\n+  };\r\n+};\r\n+\r\n+export default useVisitorStats;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752660154786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getDashboardStatistics } from \"../services/dashboardService\";\r\n+\r\n+const useVisitorStats = () => {\r\n+  const [stats, setStats] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchStats = async () => {\r\n+      try {\r\n+        setLoading(true);\r\n+        const data = awaitgetDashboardStatistics();\r\n+        setStats(data);\r\n+        setError(null);\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching visitor stats:\", error);\r\n+        if (error.response) {\r\n+          console.error(\"Server responded with:\", error.response.data);\r\n+          setError(\"Server error occurred. Please try again.\");\r\n+        } else {\r\n+          setError(\"Something went wrong. Please check your connection.\");\r\n+        }\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchStats();\r\n+  }, []); // Empty dependency array means this runs once on mount\r\n+\r\n+  // Helper function to refresh stats\r\n+  const refreshStats = async () => {\r\n+    try {\r\n+      setLoading(true);\r\n+      const data = await getVisitorStats();\r\n+      setStats(data);\r\n+      setError(null);\r\n+    } catch (error) {\r\n+      console.error(\"Error refreshing visitor stats:\", error);\r\n+      setError(\"Failed to refresh stats\");\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return { \r\n+    stats, \r\n+    loading, \r\n+    error, \r\n+    refreshStats, // Optional: allows manual refresh\r\n+    totalVisitors: stats?.visitors?.total || 0,\r\n+    visitorData: stats?.visitors?.data || []\r\n+  };\r\n+};\r\n+\r\n+export default useVisitorStats;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752660160391,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getDashboardStatistics } from \"../services/dashboardService\";\r\n+\r\n+const useVisitorStats = () => {\r\n+  const [stats, setStats] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchStats = async () => {\r\n+      try {\r\n+        setLoading(true);\r\n+        const data = await getVisitorStats();\r\n+        setStats(data);\r\n+        setError(null);\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching visitor stats:\", error);\r\n+        if (error.response) {\r\n+          console.error(\"Server responded with:\", error.response.data);\r\n+          setError(\"Server error occurred. Please try again.\");\r\n+        } else {\r\n+          setError(\"Something went wrong. Please check your connection.\");\r\n+        }\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchStats();\r\n+  }, []); // Empty dependency array means this runs once on mount\r\n+\r\n+  // Helper function to refresh stats\r\n+  const refreshStats = async () => {\r\n+    try {\r\n+      setLoading(true);\r\n+      const data = await getVisitorStats();\r\n+      setStats(data);\r\n+      setError(null);\r\n+    } catch (error) {\r\n+      console.error(\"Error refreshing visitor stats:\", error);\r\n+      setError(\"Failed to refresh stats\");\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return { \r\n+    stats, \r\n+    loading, \r\n+    error, \r\n+    refreshStats, // Optional: allows manual refresh\r\n+    totalVisitors: stats?.visitors?.total || 0,\r\n+    visitorData: stats?.visitors?.data || []\r\n+  };\r\n+};\r\n+\r\n+export default useVisitorStats;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752660169513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   useEffect(() => {\r\n     const fetchStats = async () => {\r\n       try {\r\n         setLoading(true);\r\n-        const data = await getVisitorStats();\r\n+        const data = await getDashboardStatistics();\r\n         setStats(data);\r\n         setError(null);\r\n       } catch (error) {\r\n         console.error(\"Error fetching visitor stats:\", error);\r\n@@ -53,176 +53,5 @@\n     visitorData: stats?.visitors?.data || []\r\n   };\r\n };\r\n \r\n-export default useVisitorStats;\n-import { useEffect, useState } from \"react\";\r\n-import { getDashboardStatistics } from \"../services/dashboardService\";\r\n-\r\n-const useVisitorStats = () => {\r\n-  const [stats, setStats] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchStats = async () => {\r\n-      try {\r\n-        setLoading(true);\r\n-        const data = awaitgetDashboardStatistics();\r\n-        setStats(data);\r\n-        setError(null);\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching visitor stats:\", error);\r\n-        if (error.response) {\r\n-          console.error(\"Server responded with:\", error.response.data);\r\n-          setError(\"Server error occurred. Please try again.\");\r\n-        } else {\r\n-          setError(\"Something went wrong. Please check your connection.\");\r\n-        }\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchStats();\r\n-  }, []); // Empty dependency array means this runs once on mount\r\n-\r\n-  // Helper function to refresh stats\r\n-  const refreshStats = async () => {\r\n-    try {\r\n-      setLoading(true);\r\n-      const data = await getVisitorStats();\r\n-      setStats(data);\r\n-      setError(null);\r\n-    } catch (error) {\r\n-      console.error(\"Error refreshing visitor stats:\", error);\r\n-      setError(\"Failed to refresh stats\");\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return { \r\n-    stats, \r\n-    loading, \r\n-    error, \r\n-    refreshStats, // Optional: allows manual refresh\r\n-    totalVisitors: stats?.visitors?.total || 0,\r\n-    visitorData: stats?.visitors?.data || []\r\n-  };\r\n-};\r\n-\r\n-export default useVisitorStats;\n-import { useEffect, useState } from \"react\";\r\n-import { getDashboardStatistics } from \"../services/dashbi\";\r\n-\r\n-const useVisitorStats = () => {\r\n-  const [stats, setStats] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchStats = async () => {\r\n-      try {\r\n-        setLoading(true);\r\n-        const data = await getVisitorStats();\r\n-        setStats(data);\r\n-        setError(null);\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching visitor stats:\", error);\r\n-        if (error.response) {\r\n-          console.error(\"Server responded with:\", error.response.data);\r\n-          setError(\"Server error occurred. Please try again.\");\r\n-        } else {\r\n-          setError(\"Something went wrong. Please check your connection.\");\r\n-        }\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchStats();\r\n-  }, []); // Empty dependency array means this runs once on mount\r\n-\r\n-  // Helper function to refresh stats\r\n-  const refreshStats = async () => {\r\n-    try {\r\n-      setLoading(true);\r\n-      const data = await getVisitorStats();\r\n-      setStats(data);\r\n-      setError(null);\r\n-    } catch (error) {\r\n-      console.error(\"Error refreshing visitor stats:\", error);\r\n-      setError(\"Failed to refresh stats\");\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return { \r\n-    stats, \r\n-    loading, \r\n-    error, \r\n-    refreshStats, // Optional: allows manual refresh\r\n-    totalVisitors: stats?.visitors?.total || 0,\r\n-    visitorData: stats?.visitors?.data || []\r\n-  };\r\n-};\r\n-\r\n-export default useVisitorStats;\n-import { useEffect, useState } from \"react\";\r\n-import { getDashboardStatistics } from \"../services/visitorservice\";\r\n-\r\n-const useVisitorStats = () => {\r\n-  const [stats, setStats] = useState(null);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-\r\n-  useEffect(() => {\r\n-    const fetchStats = async () => {\r\n-      try {\r\n-        setLoading(true);\r\n-        const data = await getVisitorStats();\r\n-        setStats(data);\r\n-        setError(null);\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching visitor stats:\", error);\r\n-        if (error.response) {\r\n-          console.error(\"Server responded with:\", error.response.data);\r\n-          setError(\"Server error occurred. Please try again.\");\r\n-        } else {\r\n-          setError(\"Something went wrong. Please check your connection.\");\r\n-        }\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n-\r\n-    fetchStats();\r\n-  }, []); // Empty dependency array means this runs once on mount\r\n-\r\n-  // Helper function to refresh stats\r\n-  const refreshStats = async () => {\r\n-    try {\r\n-      setLoading(true);\r\n-      const data = await getVisitorStats();\r\n-      setStats(data);\r\n-      setError(null);\r\n-    } catch (error) {\r\n-      console.error(\"Error refreshing visitor stats:\", error);\r\n-      setError(\"Failed to refresh stats\");\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return { \r\n-    stats, \r\n-    loading, \r\n-    error, \r\n-    refreshStats, // Optional: allows manual refresh\r\n-    totalVisitors: stats?.visitors?.total || 0,\r\n-    visitorData: stats?.visitors?.data || []\r\n-  };\r\n-};\r\n-\r\n export default useVisitorStats;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752660180026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   // Helper function to refresh stats\r\n   const refreshStats = async () => {\r\n     try {\r\n       setLoading(true);\r\n-      const data = await getVisitorStats();\r\n+      const data = await getDashboardStatistics();\r\n       setStats(data);\r\n       setError(null);\r\n     } catch (error) {\r\n       console.error(\"Error refreshing visitor stats:\", error);\r\n"
                },
                {
                    "date": 1752664086187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n       }\r\n     };\r\n \r\n     fetchStats();\r\n-  }, []); // Empty dependency array means this runs once on mount\r\n+  }, []); \r\n \r\n   // Helper function to refresh stats\r\n   const refreshStats = async () => {\r\n     try {\r\n"
                },
                {
                    "date": 1752664093338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getDashboardStatistics } from \"../services/dashboardService\";\r\n+\r\n+const useVisitorStats = () => {\r\n+  const [stats, setStats] = useState(null);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const fetchStats = async () => {\r\n+      try {\r\n+        setLoading(true);\r\n+        const data = await getDashboardStatistics();\r\n+        setStats(data);\r\n+        setError(null);\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching visitor stats:\", error);\r\n+        if (error.response) {\r\n+          console.error(\"Server responded with:\", error.response.data);\r\n+          setError(\"Server error occurred. Please try again.\");\r\n+        } else {\r\n+          setError(\"Something went wrong. Please check your connection.\");\r\n+        }\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n+\r\n+    fetchStats();\r\n+  }, []); \r\n+\r\n+  const refreshStats = async () => {\r\n+    try {\r\n+      setLoading(true);\r\n+      const data = await getDashboardStatistics();\r\n+      setStats(data);\r\n+      setError(null);\r\n+    } catch (error) {\r\n+      console.error(\"Error refreshing visitor stats:\", error);\r\n+      setError(\"Failed to refresh stats\");\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return { \r\n+    stats, \r\n+    loading, \r\n+    error, \r\n+    refreshStats,    totalVisitors: stats?.visitors?.total || 0,\r\n+    visitorData: stats?.visitors?.data || []\r\n+  };\r\n+};\r\n+\r\n+export default useVisitorStats;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752660048620,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from \"react\";\r\nimport { getVisitorStats } from \"../services/visitorservice\";\r\n\r\nconst useVisitorStats = () => {\r\n  const [stats, setStats] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchStats = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const data = await getVisitorStats();\r\n        setStats(data);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error(\"Error fetching visitor stats:\", error);\r\n        if (error.response) {\r\n          console.error(\"Server responded with:\", error.response.data);\r\n          setError(\"Server error occurred. Please try again.\");\r\n        } else {\r\n          setError(\"Something went wrong. Please check your connection.\");\r\n        }\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchStats();\r\n  }, []); // Empty dependency array means this runs once on mount\r\n\r\n  // Helper function to refresh stats\r\n  const refreshStats = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await getVisitorStats();\r\n      setStats(data);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error(\"Error refreshing visitor stats:\", error);\r\n      setError(\"Failed to refresh stats\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return { \r\n    stats, \r\n    loading, \r\n    error, \r\n    refreshStats, // Optional: allows manual refresh\r\n    totalVisitors: stats?.visitors?.total || 0,\r\n    visitorData: stats?.visitors?.data || []\r\n  };\r\n};\r\n\r\nexport default useVisitorStats;"
        }
    ]
}