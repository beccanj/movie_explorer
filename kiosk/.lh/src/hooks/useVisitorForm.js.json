{
    "sourceFile": "src/hooks/useVisitorForm.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 64,
            "patches": [
                {
                    "date": 1752150560155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752150772271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useState, useEffect } from 'react';\r\n import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/api';\r\n \r\n+\r\n export const useVisitorForm = () => {\r\n   const { token } = useParams();\r\n   const location = useLocation();\r\n   const [formData, setFormData] = useState({\r\n"
                },
                {
                    "date": 1752150778610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    guestName: '',\r\n+    phoneNumber: '',\r\n+    email: '',\r\n+    date: '',\r\n+    hostName: '',\r\n+    houseNumber: '',\r\n+    carPlate: '',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152227684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    guestNfuame: '',\r\n+    phoneNumber: '',\r\n+    email: '',\r\n+    date: '',\r\n+    hostName: '',\r\n+    houseNumber: '',\r\n+    carPlate: '',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152234580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full): '',\r\n+    phoneNumber: '',\r\n+    email: '',\r\n+    date: '',\r\n+    hostName: '',\r\n+    houseNumber: '',\r\n+    carPlate: '',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152244296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_: '',\r\n+    email: '',\r\n+    date: '',\r\n+    hostName: '',\r\n+    houseNumber: '',\r\n+    carPlate: '',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152250714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit: '',\r\n+    hostName: '',\r\n+    houseNumber: '',\r\n+    carPlate: '',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152255899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    hostName: '',\r\n+    houseNumber: '',\r\n+    carPlate: '',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152264086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    houseNumber: '',\r\n+    carPlate: '',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152271152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    carPlate: '',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152280413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_nuber: '',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152286549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    pro: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152291703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    profil_pic: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152335410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    profil_pic: null,\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152340773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    profil_pic: null,\r\n+    visitor_\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152348163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    profil_pic: null,\r\n+    visitor_type: '', // Default to guest\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152355536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    profil_pic: null,\r\n+    visitor_type: 'visito', // Default to guest\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152361527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,99 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token } = useParams();\r\n+  const location = useLocation();\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    profil_pic: null,\r\n+    visitor_type: 'visitor', \r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152730975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    profil_pic: null,\r\n+    visitor_type: 'visitor', \r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152737586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import { useState, useEffect, use } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    profil_pic: null,\r\n+    visitor_type: 'visitor', \r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752152777442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,103 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    profil_pic: null,\r\n+    visitor_type: 'visitor', \r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    try {\r\n+      const data = await getInvitation(token);\r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        ...data, // Prefill with partial data from resident\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752153383691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n+import { getInvitation, submitInvitation, createInvitation } from '../services/api';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752153427906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { useState, useEffect } from 'react';\r\n import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/api';\r\n+;\r\n \r\n export const useVisitorForm = () => {\r\n   const { token: urlToken } = useParams();\r\n   const [searchParams] = useSearchParams();\r\n@@ -125,1984 +125,5 @@\n     token, // Return token for debugging\r\n     handleInputChange,\r\n     handleSubmit\r\n   };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    profil_pic: null,\r\n-    visitor_type: 'visitor', \r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect, use } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    profil_pic: null,\r\n-    visitor_type: 'visitor', \r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    profil_pic: null,\r\n-    visitor_type: 'visitor', \r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    profil_pic: null,\r\n-    visitor_type: 'visitor', \r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    profil_pic: null,\r\n-    visitor_type: 'visito', // Default to guest\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    profil_pic: null,\r\n-    visitor_type: '', // Default to guest\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    profil_pic: null,\r\n-    visitor_\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    profil_pic: null,\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    profil_pic: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    pro: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_nuber: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    carPlate: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    houseNumber: '',\r\n-    carPlate: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    hostName: '',\r\n-    houseNumber: '',\r\n-    carPlate: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit: '',\r\n-    hostName: '',\r\n-    houseNumber: '',\r\n-    carPlate: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_: '',\r\n-    email: '',\r\n-    date: '',\r\n-    hostName: '',\r\n-    houseNumber: '',\r\n-    carPlate: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    full): '',\r\n-    phoneNumber: '',\r\n-    email: '',\r\n-    date: '',\r\n-    hostName: '',\r\n-    houseNumber: '',\r\n-    carPlate: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    guestNfuame: '',\r\n-    phoneNumber: '',\r\n-    email: '',\r\n-    date: '',\r\n-    hostName: '',\r\n-    houseNumber: '',\r\n-    carPlate: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-import { getInvitation, submitInvitation, createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    guestName: '',\r\n-    phoneNumber: '',\r\n-    email: '',\r\n-    date: '',\r\n-    hostName: '',\r\n-    houseNumber: '',\r\n-    carPlate: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation } from 'react-router-dom';\r\n-\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token } = useParams();\r\n-  const location = useLocation();\r\n-  const [formData, setFormData] = useState({\r\n-    guestName: '',\r\n-    phoneNumber: '',\r\n-    email: '',\r\n-    date: '',\r\n-    hostName: '',\r\n-    houseNumber: '',\r\n-    carPlate: '',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    try {\r\n-      const data = await getInvitation(token);\r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        ...data, // Prefill with partial data from resident\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752153435021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n+import \r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752153442610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n+import { create}\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752153448354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n+import { createInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752153453510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n+import { createInvitation, get } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752153458647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, s } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        alert('Registration completed successfully!');\r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752159480604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { useState, useEffect } from 'react';\r\n import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, s } from '../services/visitorservice';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n \r\n export const useVisitorForm = () => {\r\n   const { token: urlToken } = useParams();\r\n   const [searchParams] = useSearchParams();\r\n@@ -96,9 +96,9 @@\n     try {\r\n       if (isVisitorMode && token) {\r\n         // Visitor completing the invitation\r\n         await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n+        \r\n       } else {\r\n         // Resident creating invitation or security filling form\r\n         await createInvitation(formData);\r\n         if (isResidentMode) {\r\n@@ -125,650 +125,5 @@\n     token, // Return token for debugging\r\n     handleInputChange,\r\n     handleSubmit\r\n   };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-import { createInvitation, get } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-import { createInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-import { create}\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-import \r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-;\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        alert('Registration completed successfully!');\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752159488913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n     try {\r\n       if (isVisitorMode && token) {\r\n         // Visitor completing the invitation\r\n         await submitInvitation(token, formData);\r\n-        \r\n+        <\r\n       } else {\r\n         // Resident creating invitation or security filling form\r\n         await createInvitation(formData);\r\n         if (isResidentMode) {\r\n"
                },
                {
                    "date": 1752159562176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  \r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752159568500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavig\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752159573928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752159603415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n \r\n     try {\r\n       if (isVisitorMode && token) {\r\n         // Visitor completing the invitation\r\n+        \r\n         await submitInvitation(token, formData);\r\n         \r\n       } else {\r\n         // Resident creating invitation or security filling form\r\n"
                },
                {
                    "date": 1752159608814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        \r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752159630659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n \r\n     try {\r\n       if (isVisitorMode && token) {\r\n         // Visitor completing the invitation\r\n-        \r\n+        nav\r\n         await submitInvitation(token, formData);\r\n         \r\n       } else {\r\n         // Resident creating invitation or security filling form\r\n@@ -127,525 +127,5 @@\n     token, // Return token for debugging\r\n     handleInputChange,\r\n     handleSubmit\r\n   };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        \r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavig\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  \r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        await submitInvitation(token, formData);\r\n-        <\r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752159640314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752159658834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/guestregsuccess')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          alert('Invitation sent successfully!');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752214708723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n \r\n     try {\r\n       if (isVisitorMode && token) {\r\n         // Visitor completing the invitation\r\n-        navigate('/guestregsuccess')\r\n+        navigate('/')\r\n         await submitInvitation(token, formData);\r\n         \r\n       } else {\r\n         // Resident creating invitation or security filling form\r\n"
                },
                {
                    "date": 1752214776282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('/');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752214781411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('/guest');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752214806769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('//guestregsuccess);\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752214813826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('/guestregsuccess)\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752214819665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('/guestregsuccess');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752215015284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('/guestregsuccess');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      // console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752215055165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); // Debug log\r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); // Debug log\r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); // Debug log\r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('/guestregsuccess');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, // Return token for debugging\r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752215078325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,1188 +123,9 @@\n     error,\r\n     isVisitorMode,\r\n     isSecurityMode,\r\n     isResidentMode,\r\n-    token, // Return token for debugging\r\n+    token, \r\n     handleInputChange,\r\n     handleSubmit\r\n   };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('/guestregsuccess');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      // console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('/guestregsuccess');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('/guestregsuccess)\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('//guestregsuccess);\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('/guest');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('/');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        nav\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          alert('Invitation sent successfully!');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, // Return token for debugging\r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752215097835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n     setError('');\r\n     try {\r\n       console.log('Fetching invitation data for token:', token); // Debug log\r\n       const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); // Debug log\r\n+      console.log('Received invitation data:', response); \r\n       \r\n       // Extract data from the API response structure\r\n       const { data } = response;\r\n       const visitor = data;\r\n"
                },
                {
                    "date": 1752215151692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  // Determine the mode based on route and token\r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); \r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); \r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); \r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('/guestregsuccess');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, \r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752215157663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  // Get token from either URL params or query params\r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  \r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); \r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); \r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); \r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('/guestregsuccess');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, \r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752215167819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,131 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  \r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  \r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); \r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); \r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); \r\n+      \r\n+      // Extract data from the API response structure\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError('');\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        // Visitor completing the invitation\r\n+        navigate('/')\r\n+        await submitInvitation(token, formData);\r\n+        \r\n+      } else {\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+           navigate('/guestregsuccess');\r\n+        } else {\r\n+          alert('Visitor registered successfully!');\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError('Failed to submit form');\r\n+      console.error('Error submitting form:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, \r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752224258460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,140 +57,9 @@\n       console.log('Fetching invitation data for token:', token); \r\n       const response = await getInvitation(token);\r\n       console.log('Received invitation data:', response); \r\n       \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n       \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('/guestregsuccess');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, \r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  \r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); \r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); \r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); \r\n-      \r\n-      // Extract data from the API response structure\r\n       const { data } = response;\r\n       const visitor = data;\r\n       const visit = visitor.latest_visit;\r\n       \r\n@@ -258,267 +127,5 @@\n     token, \r\n     handleInputChange,\r\n     handleSubmit\r\n   };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); \r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); \r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); \r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('/guestregsuccess');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, \r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  // Get token from either URL params or query params\r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  // Determine the mode based on route and token\r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); // Debug log\r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n-    try {\r\n-      console.log('Fetching invitation data for token:', token); // Debug log\r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); \r\n-      \r\n-      // Extract data from the API response structure\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n-    } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n-      } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('/guestregsuccess');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, \r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752224317587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n     setError('');\r\n \r\n     try {\r\n       if (isVisitorMode && token) {\r\n-        // Visitor completing the invitation\r\n+        \r\n         navigate('/')\r\n         await submitInvitation(token, formData);\r\n         \r\n       } else {\r\n"
                },
                {
                    "date": 1752226601380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,35 +89,41 @@\n     }));\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError('');\r\n+  e.preventDefault();\r\n+  setLoading(true);\r\n+  setError('');\r\n \r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        \r\n-        navigate('/')\r\n-        await submitInvitation(token, formData);\r\n-        \r\n+  // ✅ Block submission if photo is missing\r\n+  if (!formData.photo) {\r\n+    setError('Please upload a photo before submitting the form.');\r\n+    setLoading(false);\r\n+    return;\r\n+  }\r\n+\r\n+  try {\r\n+    if (isVisitorMode && token) {\r\n+      await submitInvitation(token, formData);\r\n+      navigate('/');\r\n+    } else {\r\n+      // Resident creating invitation or security filling form\r\n+      await createInvitation(formData);\r\n+      if (isResidentMode) {\r\n+        navigate('/guestregsuccess');\r\n       } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-           navigate('/guestregsuccess');\r\n-        } else {\r\n-          alert('Visitor registered successfully!');\r\n-        }\r\n+        alert('Visitor registered successfully!');\r\n       }\r\n-    } catch (err) {\r\n-      setError('Failed to submit form');\r\n-      console.error('Error submitting form:', err);\r\n-    } finally {\r\n-      setLoading(false);\r\n     }\r\n-  };\r\n+  } catch (err) {\r\n+    setError('Failed to submit form');\r\n+    console.error('Error submitting form:', err);\r\n+  } finally {\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n \r\n+\r\n   return {\r\n     formData,\r\n     loading,\r\n     error,\r\n"
                },
                {
                    "date": 1752226608394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,51 @@\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+import { useState, useEffect } from \"react\";\r\n+import {\r\n+  useParams,\r\n+  useLocation,\r\n+  useSearchParams,\r\n+  useNavigate,\r\n+} from \"react-router-dom\";\r\n+import {\r\n+  createInvitation,\r\n+  getInvitation,\r\n+  submitInvitation,\r\n+} from \"../services/visitorservice\";\r\n \r\n export const useVisitorForm = () => {\r\n   const { token: urlToken } = useParams();\r\n   const [searchParams] = useSearchParams();\r\n   const location = useLocation();\r\n-  \r\n-  \r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n+\r\n+  const token = urlToken || searchParams.get(\"token\");\r\n+\r\n   const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n+    full_name: \"\",\r\n+    phone_number: \"\",\r\n+    email: \"\",\r\n+    visit_date: \"\",\r\n+    host_name: \"\",\r\n+    unit_number: \"\",\r\n+    plate_number: \"\",\r\n+    visitor_type: \"visitor\",\r\n+    photo: null,\r\n   });\r\n   const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n+  const [error, setError] = useState(\"\");\r\n   const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n   const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n   const [isResidentMode, setIsResidentMode] = useState(false);\r\n   const navigate = useNavigate();\r\n \r\n-  \r\n   useEffect(() => {\r\n-    console.log('Token found:', token); \r\n-    \r\n+    console.log(\"Token found:\", token);\r\n+\r\n     if (token) {\r\n       setIsVisitorMode(true);\r\n       setIsSecurityMode(false);\r\n       setIsResidentMode(false);\r\n       fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n+    } else if (location.pathname.includes(\"security-checkin\")) {\r\n       setIsSecurityMode(true);\r\n       setIsVisitorMode(false);\r\n       setIsResidentMode(false);\r\n     } else {\r\n@@ -49,89 +56,87 @@\n   }, [token, location.pathname]);\r\n \r\n   const fetchInvitationData = async () => {\r\n     if (!token) return;\r\n-    \r\n+\r\n     setLoading(true);\r\n-    setError('');\r\n+    setError(\"\");\r\n     try {\r\n-      console.log('Fetching invitation data for token:', token); \r\n+      console.log(\"Fetching invitation data for token:\", token);\r\n       const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); \r\n-      \r\n-      \r\n+      console.log(\"Received invitation data:\", response);\r\n+\r\n       const { data } = response;\r\n       const visitor = data;\r\n       const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n+\r\n+      setFormData((prevData) => ({\r\n         ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n+        full_name: visitor.full_name || \"\",\r\n+        email: visitor.email || \"\",\r\n+        phone_number: visitor.phone_number || \"\",\r\n+        plate_number: visitor.plate_number || \"\",\r\n+        visitor_type: visitor.visitor_type || \"visitor\",\r\n+        visit_date: visit?.visit_date || \"\",\r\n+        host_name: visit?.host_name || \"\",\r\n+        unit_number: visit?.unit_number || \"\",\r\n       }));\r\n     } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n+      setError(\"Failed to load invitation data\");\r\n+      console.error(\"Error fetching invitation:\", err);\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n   const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n+    setFormData((prev) => ({\r\n       ...prev,\r\n-      [field]: value\r\n+      [field]: value,\r\n     }));\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n-  e.preventDefault();\r\n-  setLoading(true);\r\n-  setError('');\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n \r\n-  // ✅ Block submission if photo is missing\r\n-  if (!formData.photo) {\r\n-    setError('Please upload a photo before submitting the form.');\r\n-    setLoading(false);\r\n-    return;\r\n-  }\r\n+    // ✅ Block submission if photo is missing\r\n+    if (!formData.photo) {\r\n+      setError(\"Please upload a photo before submitting the form.\");\r\n+      setLoading(false);\r\n+      return;\r\n+    }\r\n \r\n-  try {\r\n-    if (isVisitorMode && token) {\r\n-      await submitInvitation(token, formData);\r\n-      navigate('/');\r\n-    } else {\r\n-      // Resident creating invitation or security filling form\r\n\\ No newline at end of file\n-      await createInvitation(formData);\r\n-      if (isResidentMode) {\r\n-        navigate('/guestregsuccess');\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        await submitInvitation(token, formData);\r\n+        navigate(\"/\");\r\n       } else {\r\n-        alert('Visitor registered successfully!');\r\n+        // Resident creating invitation or security filling form\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          navigate(\"/guestregsuccess\");\r\n+        } else {\r\n+          alert(\"Visitor registered successfully!\");\r\n+        }\r\n       }\r\n+    } catch (err) {\r\n+      setError(\"Failed to submit form\");\r\n+      console.error(\"Error submitting form:\", err);\r\n+    } finally {\r\n+      setLoading(false);\r\n     }\r\n-  } catch (err) {\r\n-    setError('Failed to submit form');\r\n-    console.error('Error submitting form:', err);\r\n-  } finally {\r\n-    setLoading(false);\r\n-  }\r\n-};\r\n+  };\r\n \r\n-\r\n   return {\r\n     formData,\r\n     loading,\r\n     error,\r\n     isVisitorMode,\r\n     isSecurityMode,\r\n     isResidentMode,\r\n-    token, \r\n+    token,\r\n     handleInputChange,\r\n-    handleSubmit\r\n+    handleSubmit,\r\n   };\r\n-};\n+};\r\n"
                },
                {
                    "date": 1752226797731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,44 @@\n-import { useState, useEffect } from \"react\";\r\n-import {\r\n-  useParams,\r\n-  useLocation,\r\n-  useSearchParams,\r\n-  useNavigate,\r\n-} from \"react-router-dom\";\r\n-import {\r\n-  createInvitation,\r\n-  getInvitation,\r\n-  submitInvitation,\r\n-} from \"../services/visitorservice\";\r\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n \r\n export const useVisitorForm = () => {\r\n   const { token: urlToken } = useParams();\r\n   const [searchParams] = useSearchParams();\r\n   const location = useLocation();\r\n-\r\n-  const token = urlToken || searchParams.get(\"token\");\r\n-\r\n+  \r\n+  \r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n   const [formData, setFormData] = useState({\r\n-    full_name: \"\",\r\n-    phone_number: \"\",\r\n-    email: \"\",\r\n-    visit_date: \"\",\r\n-    host_name: \"\",\r\n-    unit_number: \"\",\r\n-    plate_number: \"\",\r\n-    visitor_type: \"visitor\",\r\n-    photo: null,\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n   });\r\n   const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState(\"\");\r\n+  const [error, setError] = useState('');\r\n   const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n   const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n   const [isResidentMode, setIsResidentMode] = useState(false);\r\n   const navigate = useNavigate();\r\n \r\n+  \r\n   useEffect(() => {\r\n-    console.log(\"Token found:\", token);\r\n-\r\n+    console.log('Token found:', token); \r\n+    \r\n     if (token) {\r\n       setIsVisitorMode(true);\r\n       setIsSecurityMode(false);\r\n       setIsResidentMode(false);\r\n       fetchInvitationData();\r\n-    } else if (location.pathname.includes(\"security-checkin\")) {\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n       setIsSecurityMode(true);\r\n       setIsVisitorMode(false);\r\n       setIsResidentMode(false);\r\n     } else {\r\n@@ -56,87 +49,89 @@\n   }, [token, location.pathname]);\r\n \r\n   const fetchInvitationData = async () => {\r\n     if (!token) return;\r\n-\r\n+    \r\n     setLoading(true);\r\n-    setError(\"\");\r\n+    setError('');\r\n     try {\r\n-      console.log(\"Fetching invitation data for token:\", token);\r\n+      console.log('Fetching invitation data for token:', token); \r\n       const response = await getInvitation(token);\r\n-      console.log(\"Received invitation data:\", response);\r\n-\r\n+      console.log('Received invitation data:', response); \r\n+      \r\n+      \r\n       const { data } = response;\r\n       const visitor = data;\r\n       const visit = visitor.latest_visit;\r\n-\r\n-      setFormData((prevData) => ({\r\n+      \r\n+      setFormData(prevData => ({\r\n         ...prevData,\r\n-        full_name: visitor.full_name || \"\",\r\n-        email: visitor.email || \"\",\r\n-        phone_number: visitor.phone_number || \"\",\r\n-        plate_number: visitor.plate_number || \"\",\r\n-        visitor_type: visitor.visitor_type || \"visitor\",\r\n-        visit_date: visit?.visit_date || \"\",\r\n-        host_name: visit?.host_name || \"\",\r\n-        unit_number: visit?.unit_number || \"\",\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n       }));\r\n     } catch (err) {\r\n-      setError(\"Failed to load invitation data\");\r\n-      console.error(\"Error fetching invitation:\", err);\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n   const handleInputChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n+    setFormData(prev => ({\r\n       ...prev,\r\n-      [field]: value,\r\n+      [field]: value\r\n     }));\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError(\"\");\r\n+  e.preventDefault();\r\n+  setLoading(true);\r\n+  setError('');\r\n \r\n-    // ✅ Block submission if photo is missing\r\n-    if (!formData.photo) {\r\n-      setError(\"Please upload a photo before submitting the form.\");\r\n-      setLoading(false);\r\n-      return;\r\n-    }\r\n+  // ✅ Block submission if photo is missing\r\n+  if (!formData.photo) {\r\n+    setError('Please upload a photo before submitting the form.');\r\n+    setLoading(false);\r\n+    return;\r\n+  }\r\n \r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        await submitInvitation(token, formData);\r\n-        navigate(\"/\");\r\n+  try {\r\n+    if (isVisitorMode && token) {\r\n+      await submitInvitation(token, formData);\r\n+      navigate('/');\r\n+    } else {\r\n+      // Resident creating invitation or security filling form\r\n+      await createInvitation(formData);\r\n+      if (isResidentMode) {\r\n+        navigate('/guestregsuccess');\r\n       } else {\r\n-        // Resident creating invitation or security filling form\r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          navigate(\"/guestregsuccess\");\r\n-        } else {\r\n-          alert(\"Visitor registered successfully!\");\r\n-        }\r\n+        alert('Visitor registered successfully!');\r\n       }\r\n-    } catch (err) {\r\n-      setError(\"Failed to submit form\");\r\n-      console.error(\"Error submitting form:\", err);\r\n-    } finally {\r\n-      setLoading(false);\r\n     }\r\n-  };\r\n+  } catch (err) {\r\n+    setError('Failed to submit form');\r\n+    console.error('Error submitting form:', err);\r\n+  } finally {\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n \r\n+\r\n   return {\r\n     formData,\r\n     loading,\r\n     error,\r\n     isVisitorMode,\r\n     isSecurityMode,\r\n     isResidentMode,\r\n-    token,\r\n+    token, \r\n     handleInputChange,\r\n-    handleSubmit,\r\n+    handleSubmit\r\n   };\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752227398970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,136 @@\n+import { useState, useEffect } from 'react';\r\n+import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n+import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+  \r\n+  \r\n+  const token = urlToken || searchParams.get('token');\r\n+  \r\n+  const [formData, setFormData] = useState({\r\n+    full_name: '',\r\n+    phone_number: '',\r\n+    email: '',\r\n+    visit_date: '',\r\n+    host_name: '',\r\n+    unit_number: '',\r\n+    plate_number: '',\r\n+    visitor_type: 'visitor',\r\n+    photo: null\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState('');\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  \r\n+  useEffect(() => {\r\n+    console.log('Token found:', token); \r\n+    \r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes('security-checkin')) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+    \r\n+    setLoading(true);\r\n+    setError('');\r\n+    try {\r\n+      console.log('Fetching invitation data for token:', token); \r\n+      const response = await getInvitation(token);\r\n+      console.log('Received invitation data:', response); \r\n+      \r\n+      \r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+      \r\n+      setFormData(prevData => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || '',\r\n+        email: visitor.email || '',\r\n+        phone_number: visitor.phone_number || '',\r\n+        plate_number: visitor.plate_number || '',\r\n+        visitor_type: visitor.visitor_type || 'visitor',\r\n+        visit_date: visit?.visit_date || '',\r\n+        host_name: visit?.host_name || '',\r\n+        unit_number: visit?.unit_number || '',\r\n+      }));\r\n+    } catch (err) {\r\n+      setError('Failed to load invitation data');\r\n+      console.error('Error fetching invitation:', err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+  e.preventDefault();\r\n+  setLoading(true);\r\n+  setError('');\r\n+\r\n+  // ✅ Only require photo in visitor mode\r\n+  if (isVisitorMode && !formData.photo) {\r\n+    setError('Please upload a photo before submitting the form.');\r\n+    setLoading(false);\r\n+    return;\r\n+  }\r\n+\r\n+  try {\r\n+    if (isVisitorMode && token) {\r\n+      await submitInvitation(token, formData);\r\n+      navigate('/');\r\n+    } else {\r\n+      // Resident creating invitation or security filling form\r\n+      await createInvitation(formData);\r\n+      if (isResidentMode) {\r\n+        navigate('/guestregsuccess');\r\n+      } else {\r\n+        alert('Visitor registered successfully!');\r\n+      }\r\n+    }\r\n+  } catch (err) {\r\n+    setError('Failed to submit form');\r\n+    console.error('Error submitting form:', err);\r\n+  } finally {\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token, \r\n+    handleInputChange,\r\n+    handleSubmit\r\n+  };\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1752227590249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,51 @@\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n+import { useState, useEffect } from \"react\";\r\n+import {\r\n+  useParams,\r\n+  useLocation,\r\n+  useSearchParams,\r\n+  useNavigate,\r\n+} from \"react-router-dom\";\r\n+import {\r\n+  createInvitation,\r\n+  getInvitation,\r\n+  submitInvitation,\r\n+} from \"../services/visitorservice\";\r\n \r\n export const useVisitorForm = () => {\r\n   const { token: urlToken } = useParams();\r\n   const [searchParams] = useSearchParams();\r\n   const location = useLocation();\r\n-  \r\n-  \r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n+\r\n+  const token = urlToken || searchParams.get(\"token\");\r\n+\r\n   const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n+    full_name: \"\",\r\n+    phone_number: \"\",\r\n+    email: \"\",\r\n+    visit_date: \"\",\r\n+    host_name: \"\",\r\n+    unit_number: \"\",\r\n+    plate_number: \"\",\r\n+    visitor_type: \"visitor\",\r\n+    photo: null,\r\n   });\r\n   const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n+  const [error, setError] = useState(\"\");\r\n   const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n   const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n   const [isResidentMode, setIsResidentMode] = useState(false);\r\n   const navigate = useNavigate();\r\n \r\n-  \r\n   useEffect(() => {\r\n-    console.log('Token found:', token); \r\n-    \r\n+    console.log(\"Token found:\", token);\r\n+\r\n     if (token) {\r\n       setIsVisitorMode(true);\r\n       setIsSecurityMode(false);\r\n       setIsResidentMode(false);\r\n       fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n+    } else if (location.pathname.includes(\"security-checkin\")) {\r\n       setIsSecurityMode(true);\r\n       setIsVisitorMode(false);\r\n       setIsResidentMode(false);\r\n     } else {\r\n@@ -49,225 +56,87 @@\n   }, [token, location.pathname]);\r\n \r\n   const fetchInvitationData = async () => {\r\n     if (!token) return;\r\n-    \r\n+\r\n     setLoading(true);\r\n-    setError('');\r\n+    setError(\"\");\r\n     try {\r\n-      console.log('Fetching invitation data for token:', token); \r\n+      console.log(\"Fetching invitation data for token:\", token);\r\n       const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); \r\n-      \r\n-      \r\n+      console.log(\"Received invitation data:\", response);\r\n+\r\n       const { data } = response;\r\n       const visitor = data;\r\n       const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n+\r\n+      setFormData((prevData) => ({\r\n         ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n+        full_name: visitor.full_name || \"\",\r\n+        email: visitor.email || \"\",\r\n+        phone_number: visitor.phone_number || \"\",\r\n+        plate_number: visitor.plate_number || \"\",\r\n+        visitor_type: visitor.visitor_type || \"visitor\",\r\n+        visit_date: visit?.visit_date || \"\",\r\n+        host_name: visit?.host_name || \"\",\r\n+        unit_number: visit?.unit_number || \"\",\r\n       }));\r\n     } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n+      setError(\"Failed to load invitation data\");\r\n+      console.error(\"Error fetching invitation:\", err);\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n   const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n+    setFormData((prev) => ({\r\n       ...prev,\r\n-      [field]: value\r\n+      [field]: value,\r\n     }));\r\n   };\r\n \r\n   const handleSubmit = async (e) => {\r\n-  e.preventDefault();\r\n-  setLoading(true);\r\n-  setError('');\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n \r\n-  // ✅ Only require photo in visitor mode\r\n-  if (isVisitorMode && !formData.photo) {\r\n-    setError('Please upload a photo before submitting the form.');\r\n-    setLoading(false);\r\n-    return;\r\n-  }\r\n-\r\n-  try {\r\n-    if (isVisitorMode && token) {\r\n-      await submitInvitation(token, formData);\r\n-      navigate('/');\r\n-    } else {\r\n-      // Resident creating invitation or security filling form\r\n-      await createInvitation(formData);\r\n-      if (isResidentMode) {\r\n-        navigate('/guestregsuccess');\r\n-      } else {\r\n-        alert('Visitor registered successfully!');\r\n-      }\r\n+    // ✅ Only require photo in visitor mode\r\n+    if (isVisitorMode && !formData.photo) {\r\n+      setError(\"Please upload a photo before submitting the form.\");\r\n+      setLoading(false);\r\n+      return;\r\n     }\r\n-  } catch (err) {\r\n-    setError('Failed to submit form');\r\n-    console.error('Error submitting form:', err);\r\n-  } finally {\r\n-    setLoading(false);\r\n-  }\r\n-};\r\n \r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token, \r\n-    handleInputChange,\r\n-    handleSubmit\r\n-  };\r\n-};\n-import { useState, useEffect } from 'react';\r\n-import { useParams, useLocation, useSearchParams, useNavigate } from 'react-router-dom';\r\n-import { createInvitation, getInvitation, submitInvitation } from '../services/visitorservice';\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-  \r\n-  \r\n-  const token = urlToken || searchParams.get('token');\r\n-  \r\n-  const [formData, setFormData] = useState({\r\n-    full_name: '',\r\n-    phone_number: '',\r\n-    email: '',\r\n-    visit_date: '',\r\n-    host_name: '',\r\n-    unit_number: '',\r\n-    plate_number: '',\r\n-    visitor_type: 'visitor',\r\n-    photo: null\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState('');\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  \r\n-  useEffect(() => {\r\n-    console.log('Token found:', token); \r\n-    \r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes('security-checkin')) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-    \r\n-    setLoading(true);\r\n-    setError('');\r\n     try {\r\n-      console.log('Fetching invitation data for token:', token); \r\n-      const response = await getInvitation(token);\r\n-      console.log('Received invitation data:', response); \r\n+      if (isVisitorMode && token) {\r\n+        await submitInvitation(token, formData);\r\n+        navigate(\"/\");\r\n+      } else {\r\n       \r\n-      \r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-      \r\n-      setFormData(prevData => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || '',\r\n-        email: visitor.email || '',\r\n-        phone_number: visitor.phone_number || '',\r\n-        plate_number: visitor.plate_number || '',\r\n-        visitor_type: visitor.visitor_type || 'visitor',\r\n-        visit_date: visit?.visit_date || '',\r\n-        host_name: visit?.host_name || '',\r\n-        unit_number: visit?.unit_number || '',\r\n-      }));\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          navigate(\"/guestregsuccess\");\r\n+        } else {\r\n+          alert(\"Visitor registered successfully!\");\r\n+        }\r\n+      }\r\n     } catch (err) {\r\n-      setError('Failed to load invitation data');\r\n-      console.error('Error fetching invitation:', err);\r\n+      setError(\"Failed to submit form\");\r\n+      console.error(\"Error submitting form:\", err);\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData(prev => ({\r\n-      ...prev,\r\n-      [field]: value\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-  e.preventDefault();\r\n-  setLoading(true);\r\n-  setError('');\r\n-\r\n-  // ✅ Block submission if photo is missing\r\n\\ No newline at end of file\n-  if (!formData.photo) {\r\n-    setError('Please upload a photo before submitting the form.');\r\n-    setLoading(false);\r\n-    return;\r\n-  }\r\n-\r\n-  try {\r\n-    if (isVisitorMode && token) {\r\n-      await submitInvitation(token, formData);\r\n-      navigate('/');\r\n-    } else {\r\n-      // Resident creating invitation or security filling form\r\n-      await createInvitation(formData);\r\n-      if (isResidentMode) {\r\n-        navigate('/guestregsuccess');\r\n-      } else {\r\n-        alert('Visitor registered successfully!');\r\n-      }\r\n-    }\r\n-  } catch (err) {\r\n-    setError('Failed to submit form');\r\n-    console.error('Error submitting form:', err);\r\n-  } finally {\r\n-    setLoading(false);\r\n-  }\r\n-};\r\n-\r\n-\r\n   return {\r\n     formData,\r\n     loading,\r\n     error,\r\n     isVisitorMode,\r\n     isSecurityMode,\r\n     isResidentMode,\r\n-    token, \r\n+    token,\r\n     handleInputChange,\r\n-    handleSubmit\r\n+    handleSubmit,\r\n   };\r\n-};\n+};\r\n"
                },
                {
                    "date": 1752227597980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import { useState, useEffect } from \"react\";\r\n+import {\r\n+  useParams,\r\n+  useLocation,\r\n+  useSearchParams,\r\n+  useNavigate,\r\n+} from \"react-router-dom\";\r\n+import {\r\n+  createInvitation,\r\n+  getInvitation,\r\n+  submitInvitation,\r\n+} from \"../services/visitorservice\";\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+\r\n+  const token = urlToken || searchParams.get(\"token\");\r\n+\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: \"\",\r\n+    phone_number: \"\",\r\n+    email: \"\",\r\n+    visit_date: \"\",\r\n+    host_name: \"\",\r\n+    unit_number: \"\",\r\n+    plate_number: \"\",\r\n+    visitor_type: \"visitor\",\r\n+    photo: null,\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState(\"\");\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  useEffect(() => {\r\n+    console.log(\"Token found:\", token);\r\n+\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes(\"security-checkin\")) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n+    try {\r\n+      console.log(\"Fetching invitation data for token:\", token);\r\n+      const response = await getInvitation(token);\r\n+      console.log(\"Received invitation data:\", response);\r\n+\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+\r\n+      setFormData((prevData) => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || \"\",\r\n+        email: visitor.email || \"\",\r\n+        phone_number: visitor.phone_number || \"\",\r\n+        plate_number: visitor.plate_number || \"\",\r\n+        visitor_type: visitor.visitor_type || \"visitor\",\r\n+        visit_date: visit?.visit_date || \"\",\r\n+        host_name: visit?.host_name || \"\",\r\n+        unit_number: visit?.unit_number || \"\",\r\n+      }));\r\n+    } catch (err) {\r\n+      setError(\"Failed to load invitation data\");\r\n+      console.error(\"Error fetching invitation:\", err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [field]: value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n+\r\n+    //\r\n+    if (isVisitorMode && !formData.photo) {\r\n+      setError(\"Please upload a photo before submitting the form.\");\r\n+      setLoading(false);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        await submitInvitation(token, formData);\r\n+        navigate(\"/\");\r\n+      } else {\r\n+      \r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          navigate(\"/guestregsuccess\");\r\n+        } else {\r\n+          alert(\"Visitor registered successfully!\");\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError(\"Failed to submit form\");\r\n+      console.error(\"Error submitting form:\", err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token,\r\n+    handleInputChange,\r\n+    handleSubmit,\r\n+  };\r\n+};\r\n"
                },
                {
                    "date": 1752562297062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,9 @@\n   const { token: urlToken } = useParams();\r\n   const [searchParams] = useSearchParams();\r\n   const location = useLocation();\r\n \r\n-  const token = urlToken || searchParams.get(\"token\");\r\n-\r\n+  \r\n   const [formData, setFormData] = useState({\r\n     full_name: \"\",\r\n     phone_number: \"\",\r\n     email: \"\",\r\n@@ -139,146 +138,4 @@\n     handleInputChange,\r\n     handleSubmit,\r\n   };\r\n };\r\n-import { useState, useEffect } from \"react\";\r\n-import {\r\n-  useParams,\r\n-  useLocation,\r\n-  useSearchParams,\r\n-  useNavigate,\r\n-} from \"react-router-dom\";\r\n-import {\r\n-  createInvitation,\r\n-  getInvitation,\r\n-  submitInvitation,\r\n-} from \"../services/visitorservice\";\r\n-\r\n-export const useVisitorForm = () => {\r\n-  const { token: urlToken } = useParams();\r\n-  const [searchParams] = useSearchParams();\r\n-  const location = useLocation();\r\n-\r\n-  const token = urlToken || searchParams.get(\"token\");\r\n-\r\n-  const [formData, setFormData] = useState({\r\n-    full_name: \"\",\r\n-    phone_number: \"\",\r\n-    email: \"\",\r\n-    visit_date: \"\",\r\n-    host_name: \"\",\r\n-    unit_number: \"\",\r\n-    plate_number: \"\",\r\n-    visitor_type: \"visitor\",\r\n-    photo: null,\r\n-  });\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState(\"\");\r\n-  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n-  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n-  const [isResidentMode, setIsResidentMode] = useState(false);\r\n-  const navigate = useNavigate();\r\n-\r\n-  useEffect(() => {\r\n-    console.log(\"Token found:\", token);\r\n-\r\n-    if (token) {\r\n-      setIsVisitorMode(true);\r\n-      setIsSecurityMode(false);\r\n-      setIsResidentMode(false);\r\n-      fetchInvitationData();\r\n-    } else if (location.pathname.includes(\"security-checkin\")) {\r\n-      setIsSecurityMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsResidentMode(false);\r\n-    } else {\r\n-      setIsResidentMode(true);\r\n-      setIsVisitorMode(false);\r\n-      setIsSecurityMode(false);\r\n-    }\r\n-  }, [token, location.pathname]);\r\n-\r\n-  const fetchInvitationData = async () => {\r\n-    if (!token) return;\r\n-\r\n-    setLoading(true);\r\n-    setError(\"\");\r\n-    try {\r\n-      console.log(\"Fetching invitation data for token:\", token);\r\n-      const response = await getInvitation(token);\r\n-      console.log(\"Received invitation data:\", response);\r\n-\r\n-      const { data } = response;\r\n-      const visitor = data;\r\n-      const visit = visitor.latest_visit;\r\n-\r\n-      setFormData((prevData) => ({\r\n-        ...prevData,\r\n-        full_name: visitor.full_name || \"\",\r\n-        email: visitor.email || \"\",\r\n-        phone_number: visitor.phone_number || \"\",\r\n-        plate_number: visitor.plate_number || \"\",\r\n-        visitor_type: visitor.visitor_type || \"visitor\",\r\n-        visit_date: visit?.visit_date || \"\",\r\n-        host_name: visit?.host_name || \"\",\r\n-        unit_number: visit?.unit_number || \"\",\r\n-      }));\r\n-    } catch (err) {\r\n-      setError(\"Failed to load invitation data\");\r\n-      console.error(\"Error fetching invitation:\", err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const handleInputChange = (field, value) => {\r\n-    setFormData((prev) => ({\r\n-      ...prev,\r\n-      [field]: value,\r\n-    }));\r\n-  };\r\n-\r\n-  const handleSubmit = async (e) => {\r\n-    e.preventDefault();\r\n-    setLoading(true);\r\n-    setError(\"\");\r\n-\r\n-    // ✅ Only require photo in visitor mode\r\n-    if (isVisitorMode && !formData.photo) {\r\n-      setError(\"Please upload a photo before submitting the form.\");\r\n-      setLoading(false);\r\n-      return;\r\n-    }\r\n-\r\n-    try {\r\n-      if (isVisitorMode && token) {\r\n-        await submitInvitation(token, formData);\r\n-        navigate(\"/\");\r\n-      } else {\r\n-      \r\n-        await createInvitation(formData);\r\n-        if (isResidentMode) {\r\n-          navigate(\"/guestregsuccess\");\r\n-        } else {\r\n-          alert(\"Visitor registered successfully!\");\r\n-        }\r\n-      }\r\n-    } catch (err) {\r\n-      setError(\"Failed to submit form\");\r\n-      console.error(\"Error submitting form:\", err);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return {\r\n-    formData,\r\n-    loading,\r\n-    error,\r\n-    isVisitorMode,\r\n-    isSecurityMode,\r\n-    isResidentMode,\r\n-    token,\r\n-    handleInputChange,\r\n-    handleSubmit,\r\n-  };\r\n-};\r\n"
                },
                {
                    "date": 1752562314858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,97 @@\n   const { token: urlToken } = useParams();\r\n   const [searchParams] = useSearchParams();\r\n   const location = useLocation();\r\n \r\n-  \r\n+  import React from \"react\";\r\n+import { Link, useNavigate } from \"react-router-dom\";\r\n+\r\n+const ResetPasswordForm = () => {\r\n+  const navigate = useNavigate();\r\n+\r\n+  const handleResetPassword = () => {\r\n+    // Add form validation or API logic here if needed\r\n+\r\n+    // Redirect to login page after reset\r\n+    navigate(\"/loginform\");\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 p-6\">\r\n+      <div className=\"bg-white shadow-lg rounded-lg w-full max-w-4xl flex flex-col md:flex-row\">\r\n+        {/* Left image with logo */}\r\n+        <div className=\"w-full md:w-1/2 relative\">\r\n+          <img\r\n+            src=\"rectangle-780.png\"\r\n+            alt=\"Signup Visual\"\r\n+            className=\"w-full h-full object-cover rounded-t-lg md:rounded-l-lg md:rounded-tr-none\"\r\n+          />\r\n+          <img\r\n+            src=\"logo copy.svg\"\r\n+            alt=\"West Brook Logo\"\r\n+            className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 max-w-[150px] sm:max-w-[200px] lg:max-w-[250px] max-h-[200px] sm:max-h-[300px] lg:max-h-[500px] w-full h-auto animate-bounce-once\"\r\n+          />\r\n+        </div>\r\n+\r\n+        {/* Form Section */}\r\n+        <div className=\"w-full md:w-1/2 p-8 mt-10\">\r\n+          <div className=\"mb-6\">\r\n+            <h2 className=\"text-2xl font-semibold mb-2\">Reset Password</h2>\r\n+            <p className=\"text-sm text-gray-600\">\r\n+              Enter your new password so as to continue and login\r\n+            </p>\r\n+          </div>\r\n+\r\n+          <div className=\"mb-4\">\r\n+            <label className=\"block text-sm font-medium mb-1\">\r\n+              New Password*\r\n+            </label>\r\n+            <input\r\n+              type=\"password\"\r\n+              placeholder=\"Create New Password\"\r\n+              className=\"w-full border border-gray-300 rounded px-3 py-2\"\r\n+            />\r\n+          </div>\r\n+\r\n+          <div className=\"mb-6\">\r\n+            <label className=\"block text-sm font-medium mb-1\">\r\n+              Confirm New Password*\r\n+            </label>\r\n+            <input\r\n+              type=\"password\"\r\n+              placeholder=\"Enter Password Again\"\r\n+              className=\"w-full border border-gray-300 rounded px-3 py-2\"\r\n+            />\r\n+          </div>\r\n+\r\n+          {/* Reset Button */}\r\n+          <div className=\"mb-6\">\r\n+            <button\r\n+              onClick={handleResetPassword}\r\n+              className=\"w-full bg-[#005e0e] text-white py-2 rounded\"\r\n+            >\r\n+              RESET PASSWORD\r\n+            </button>\r\n+          </div>\r\n+\r\n+          {/* Back to Login */}\r\n+          <div className=\"text-center text-sm text-gray-600\">\r\n+            Go back to{\" \"}\r\n+            <Link\r\n+              to=\"/loginform\"\r\n+              className=\"text-[#005e0e] font-medium hover:underline\"\r\n+            >\r\n+              LOGIN\r\n+            </Link>\r\n+          </div>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default ResetPasswordForm;\r\n+\r\n   const [formData, setFormData] = useState({\r\n     full_name: \"\",\r\n     phone_number: \"\",\r\n     email: \"\",\r\n"
                },
                {
                    "date": 1752562326614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import { useState, useEffect } from \"react\";\r\n+import {\r\n+  useParams,\r\n+  useLocation,\r\n+  useSearchParams,\r\n+  useNavigate,\r\n+} from \"react-router-dom\";\r\n+import {\r\n+  createInvitation,\r\n+  getInvitation,\r\n+  submitInvitation,\r\n+} from \"../services/visitorservice\";\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const [searchParams] = useSearchParams();\r\n+  const location = useLocation();\r\n+\r\n+  const token = urlToken || \r\n+\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: \"\",\r\n+    phone_number: \"\",\r\n+    email: \"\",\r\n+    visit_date: \"\",\r\n+    host_name: \"\",\r\n+    unit_number: \"\",\r\n+    plate_number: \"\",\r\n+    visitor_type: \"visitor\",\r\n+    photo: null,\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState(\"\");\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  useEffect(() => {\r\n+    console.log(\"Token found:\", token);\r\n+\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes(\"security-checkin\")) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n+    try {\r\n+      console.log(\"Fetching invitation data for token:\", token);\r\n+      const response = await getInvitation(token);\r\n+      console.log(\"Received invitation data:\", response);\r\n+\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+\r\n+      setFormData((prevData) => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || \"\",\r\n+        email: visitor.email || \"\",\r\n+        phone_number: visitor.phone_number || \"\",\r\n+        plate_number: visitor.plate_number || \"\",\r\n+        visitor_type: visitor.visitor_type || \"visitor\",\r\n+        visit_date: visit?.visit_date || \"\",\r\n+        host_name: visit?.host_name || \"\",\r\n+        unit_number: visit?.unit_number || \"\",\r\n+      }));\r\n+    } catch (err) {\r\n+      setError(\"Failed to load invitation data\");\r\n+      console.error(\"Error fetching invitation:\", err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [field]: value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n+\r\n+    //\r\n+    if (isVisitorMode && !formData.photo) {\r\n+      setError(\"Please upload a photo before submitting the form.\");\r\n+      setLoading(false);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        await submitInvitation(token, formData);\r\n+        navigate(\"/\");\r\n+      } else {\r\n+      \r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          navigate(\"/guestregsuccess\");\r\n+        } else {\r\n+          alert(\"Visitor registered successfully!\");\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError(\"Failed to submit form\");\r\n+      console.error(\"Error submitting form:\", err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token,\r\n+    handleInputChange,\r\n+    handleSubmit,\r\n+  };\r\n+};\r\n"
                },
                {
                    "date": 1752562335811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,142 @@\n+import { useState, useEffect } from \"react\";\r\n+import {\r\n+  useParams,\r\n+  useLocation,\r\n+  useSearchParams,\r\n+  useNavigate,\r\n+} from \"react-router-dom\";\r\n+import {\r\n+  createInvitation,\r\n+  getInvitation,\r\n+  submitInvitation,\r\n+} from \"../services/visitorservice\";\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  \r\n+  const location = useLocation();\r\n+\r\n+  const token = urlToken \r\n+\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: \"\",\r\n+    phone_number: \"\",\r\n+    email: \"\",\r\n+    visit_date: \"\",\r\n+    host_name: \"\",\r\n+    unit_number: \"\",\r\n+    plate_number: \"\",\r\n+    visitor_type: \"visitor\",\r\n+    photo: null,\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState(\"\");\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  useEffect(() => {\r\n+    console.log(\"Token found:\", token);\r\n+\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes(\"security-checkin\")) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n+    try {\r\n+      console.log(\"Fetching invitation data for token:\", token);\r\n+      const response = await getInvitation(token);\r\n+      console.log(\"Received invitation data:\", response);\r\n+\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+\r\n+      setFormData((prevData) => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || \"\",\r\n+        email: visitor.email || \"\",\r\n+        phone_number: visitor.phone_number || \"\",\r\n+        plate_number: visitor.plate_number || \"\",\r\n+        visitor_type: visitor.visitor_type || \"visitor\",\r\n+        visit_date: visit?.visit_date || \"\",\r\n+        host_name: visit?.host_name || \"\",\r\n+        unit_number: visit?.unit_number || \"\",\r\n+      }));\r\n+    } catch (err) {\r\n+      setError(\"Failed to load invitation data\");\r\n+      console.error(\"Error fetching invitation:\", err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [field]: value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n+\r\n+    //\r\n+    if (isVisitorMode && !formData.photo) {\r\n+      setError(\"Please upload a photo before submitting the form.\");\r\n+      setLoading(false);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        await submitInvitation(token, formData);\r\n+        navigate(\"/\");\r\n+      } else {\r\n+      \r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          navigate(\"/guestregsuccess\");\r\n+        } else {\r\n+          alert(\"Visitor registered successfully!\");\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError(\"Failed to submit form\");\r\n+      console.error(\"Error submitting form:\", err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token,\r\n+    handleInputChange,\r\n+    handleSubmit,\r\n+  };\r\n+};\r\n"
                },
                {
                    "date": 1752562343505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,140 @@\n+import { useState, useEffect } from \"react\";\r\n+import {\r\n+  useParams,\r\n+  useLocation,\r\n+  useSearchParams,\r\n+  useNavigate,\r\n+} from \"react-router-dom\";\r\n+import {\r\n+  createInvitation,\r\n+  getInvitation,\r\n+  submitInvitation,\r\n+} from \"../services/visitorservice\";\r\n+\r\n+export const useVisitorForm = () => {\r\n+  const { token: urlToken } = useParams();\r\n+  const location = useLocation();\r\n+\r\n+  const token = urlToken;\r\n+\r\n+  const [formData, setFormData] = useState({\r\n+    full_name: \"\",\r\n+    phone_number: \"\",\r\n+    email: \"\",\r\n+    visit_date: \"\",\r\n+    host_name: \"\",\r\n+    unit_number: \"\",\r\n+    plate_number: \"\",\r\n+    visitor_type: \"visitor\",\r\n+    photo: null,\r\n+  });\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState(\"\");\r\n+  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n+  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n+  const [isResidentMode, setIsResidentMode] = useState(false);\r\n+  const navigate = useNavigate();\r\n+\r\n+  useEffect(() => {\r\n+    console.log(\"Token found:\", token);\r\n+\r\n+    if (token) {\r\n+      setIsVisitorMode(true);\r\n+      setIsSecurityMode(false);\r\n+      setIsResidentMode(false);\r\n+      fetchInvitationData();\r\n+    } else if (location.pathname.includes(\"security-checkin\")) {\r\n+      setIsSecurityMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsResidentMode(false);\r\n+    } else {\r\n+      setIsResidentMode(true);\r\n+      setIsVisitorMode(false);\r\n+      setIsSecurityMode(false);\r\n+    }\r\n+  }, [token, location.pathname]);\r\n+\r\n+  const fetchInvitationData = async () => {\r\n+    if (!token) return;\r\n+\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n+    try {\r\n+      console.log(\"Fetching invitation data for token:\", token);\r\n+      const response = await getInvitation(token);\r\n+      console.log(\"Received invitation data:\", response);\r\n+\r\n+      const { data } = response;\r\n+      const visitor = data;\r\n+      const visit = visitor.latest_visit;\r\n+\r\n+      setFormData((prevData) => ({\r\n+        ...prevData,\r\n+        full_name: visitor.full_name || \"\",\r\n+        email: visitor.email || \"\",\r\n+        phone_number: visitor.phone_number || \"\",\r\n+        plate_number: visitor.plate_number || \"\",\r\n+        visitor_type: visitor.visitor_type || \"visitor\",\r\n+        visit_date: visit?.visit_date || \"\",\r\n+        host_name: visit?.host_name || \"\",\r\n+        unit_number: visit?.unit_number || \"\",\r\n+      }));\r\n+    } catch (err) {\r\n+      setError(\"Failed to load invitation data\");\r\n+      console.error(\"Error fetching invitation:\", err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const handleInputChange = (field, value) => {\r\n+    setFormData((prev) => ({\r\n+      ...prev,\r\n+      [field]: value,\r\n+    }));\r\n+  };\r\n+\r\n+  const handleSubmit = async (e) => {\r\n+    e.preventDefault();\r\n+    setLoading(true);\r\n+    setError(\"\");\r\n+\r\n+    //\r\n+    if (isVisitorMode && !formData.photo) {\r\n+      setError(\"Please upload a photo before submitting the form.\");\r\n+      setLoading(false);\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      if (isVisitorMode && token) {\r\n+        await submitInvitation(token, formData);\r\n+        navigate(\"/\");\r\n+      } else {\r\n+        await createInvitation(formData);\r\n+        if (isResidentMode) {\r\n+          navigate(\"/guestregsuccess\");\r\n+        } else {\r\n+          alert(\"Visitor registered successfully!\");\r\n+        }\r\n+      }\r\n+    } catch (err) {\r\n+      setError(\"Failed to submit form\");\r\n+      console.error(\"Error submitting form:\", err);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return {\r\n+    formData,\r\n+    loading,\r\n+    error,\r\n+    isVisitorMode,\r\n+    isSecurityMode,\r\n+    isResidentMode,\r\n+    token,\r\n+    handleInputChange,\r\n+    handleSubmit,\r\n+  };\r\n+};\r\n"
                },
                {
                    "date": 1752562349201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useState, useEffect } from \"react\";\r\n import {\r\n   useParams,\r\n   useLocation,\r\n-  useSearchParams,\r\n+  \r\n   useNavigate,\r\n } from \"react-router-dom\";\r\n import {\r\n   createInvitation,\r\n"
                }
            ],
            "date": 1752150560155,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from 'react';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\nimport { getInvitation, submitInvitation, createInvitation } from '../services/api';\r\n\r\nexport const useVisitorForm = () => {\r\n  const { token } = useParams();\r\n  const location = useLocation();\r\n  const [formData, setFormData] = useState({\r\n    guestName: '',\r\n    phoneNumber: '',\r\n    email: '',\r\n    date: '',\r\n    hostName: '',\r\n    houseNumber: '',\r\n    carPlate: '',\r\n    photo: null\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [isVisitorMode, setIsVisitorMode] = useState(false);\r\n  const [isSecurityMode, setIsSecurityMode] = useState(false);\r\n  const [isResidentMode, setIsResidentMode] = useState(false);\r\n\r\n  // Determine the mode based on route and token\r\n  useEffect(() => {\r\n    if (token) {\r\n      setIsVisitorMode(true);\r\n      fetchInvitationData();\r\n    } else if (location.pathname.includes('security-checkin')) {\r\n      setIsSecurityMode(true);\r\n    } else {\r\n      setIsResidentMode(true);\r\n    }\r\n  }, [token, location.pathname]);\r\n\r\n  const fetchInvitationData = async () => {\r\n    if (!token) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const data = await getInvitation(token);\r\n      setFormData(prevData => ({\r\n        ...prevData,\r\n        ...data, // Prefill with partial data from resident\r\n      }));\r\n    } catch (err) {\r\n      setError('Failed to load invitation data');\r\n      console.error('Error fetching invitation:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field, value) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [field]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      if (isVisitorMode && token) {\r\n        // Visitor completing the invitation\r\n        await submitInvitation(token, formData);\r\n        alert('Registration completed successfully!');\r\n      } else {\r\n        // Resident creating invitation or security filling form\r\n        await createInvitation(formData);\r\n        if (isResidentMode) {\r\n          alert('Invitation sent successfully!');\r\n        } else {\r\n          alert('Visitor registered successfully!');\r\n        }\r\n      }\r\n    } catch (err) {\r\n      setError('Failed to submit form');\r\n      console.error('Error submitting form:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    formData,\r\n    loading,\r\n    error,\r\n    isVisitorMode,\r\n    isSecurityMode,\r\n    isResidentMode,\r\n    handleInputChange,\r\n    handleSubmit\r\n  };\r\n};"
        }
    ]
}