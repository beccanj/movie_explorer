{
    "sourceFile": "src/hooks/useExpectedVisitors.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1753419721975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753419730180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// hooks/useExpectedVisitors.js\r\n+\r\n import { useEffect, useState } from \"react\";\r\n import { getDashboardStats } from \"../services/visitorService\";\r\n \r\n export default function useExpectedVisitors() {\r\n"
                },
                {
                    "date": 1753420035671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,37 @@\n-\r\n import { useEffect, useState } from \"react\";\r\n-import { getDashboardStats } from \"../services/visitorService\";\r\n+import { getDashboardStats } from \"../services/dashboardService\";\r\n+import dayjs from \"dayjs\";\r\n \r\n-export default function useExpectedVisitors() {\r\n+export function useExpectedVisitors() {\r\n   const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState(null);\r\n \r\n   useEffect(() => {\r\n-    async function fetchStats() {\r\n+    async function fetchExpected() {\r\n       try {\r\n+        setLoading(true);\r\n         const data = await getDashboardStats();\r\n-        setExpectedVisitors(data.expected_visitors || []);\r\n-      } catch (error) {\r\n-        console.error(\"Failed to fetch expected visitors:\", error);\r\n+\r\n+        // Filter visits with a future date in the current week\r\n+        const now = dayjs();\r\n\\ No newline at end of file\n+        const endOfWeek = dayjs().endOf(\"week\");\r\n+\r\n+        const visitsThisWeek = data?.visits?.filter((visit) => {\r\n+          const visitDate = dayjs(visit.visit_date);\r\n+          return visitDate.isAfter(now) && visitDate.isBefore(endOfWeek);\r\n+        });\r\n+\r\n+        setExpectedVisitors(visitsThisWeek || []);\r\n+      } catch (err) {\r\n+        setError(err.message || \"Error fetching expected visitors\");\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     }\r\n \r\n-    fetchStats();\r\n+    fetchExpected();\r\n   }, []);\r\n \r\n-  return { expectedVisitors, loading };\r\n-}\n+  return { expectedVisitors, loading, error };\r\n+}\r\n"
                },
                {
                    "date": 1753420043270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n       try {\r\n         setLoading(true);\r\n         const data = await getDashboardStats();\r\n \r\n-        // Filter visits with a future date in the current week\r\n+        \r\n         const now = dayjs();\r\n         const endOfWeek = dayjs().endOf(\"week\");\r\n \r\n         const visitsThisWeek = data?.visits?.filter((visit) => {\r\n@@ -33,5 +33,5 @@\n     fetchExpected();\r\n   }, []);\r\n \r\n   return { expectedVisitors, loading, error };\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1753420471495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getDashboardStats } from \"../services/\";\r\n+import dayjs from \"dayjs\";\r\n+\r\n+export function useExpectedVisitors() {\r\n+  const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    async function fetchExpected() {\r\n+      try {\r\n+        setLoading(true);\r\n+        const data = await getDashboardStats();\r\n+\r\n+        \r\n+        const now = dayjs();\r\n+        const endOfWeek = dayjs().endOf(\"week\");\r\n+\r\n+        const visitsThisWeek = data?.visits?.filter((visit) => {\r\n+          const visitDate = dayjs(visit.visit_date);\r\n+          return visitDate.isAfter(now) && visitDate.isBefore(endOfWeek);\r\n+        });\r\n+\r\n+        setExpectedVisitors(visitsThisWeek || []);\r\n+      } catch (err) {\r\n+        setError(err.message || \"Error fetching expected visitors\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    }\r\n+\r\n+    fetchExpected();\r\n+  }, []);\r\n+\r\n+  return { expectedVisitors, loading, error };\r\n+}\r\n"
                },
                {
                    "date": 1753420549089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,37 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getDashboardStats } from \"../services/dashboardService\";\r\n+import dayjs from \"dayjs\";\r\n+\r\n+export function useExpectedVisitors() {\r\n+  const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    async function fetchExpected() {\r\n+      try {\r\n+        setLoading(true);\r\n+        const data = await getDashboardStats();\r\n+\r\n+        \r\n+        const now = dayjs();\r\n+        const endOfWeek = dayjs().endOf(\"week\");\r\n+\r\n+        const visitsThisWeek = data?.visits?.filter((visit) => {\r\n+          const visitDate = dayjs(visit.visit_date);\r\n+          return visitDate.isAfter(now) && visitDate.isBefore(endOfWeek);\r\n+        });\r\n+\r\n+        setExpectedVisitors(visitsThisWeek || []);\r\n+      } catch (err) {\r\n+        setError(err.message || \"Error fetching expected visitors\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    }\r\n+\r\n+    fetchExpected();\r\n+  }, []);\r\n+\r\n+  return { expectedVisitors, loading, error };\r\n+}\r\n"
                },
                {
                    "date": 1753420582435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useEffect, useState } from \"react\";\r\n-import { getDashboardStats } from \"../services/dashboardService\";\r\n+import { getDashboardStatistics } from \"../services/dashboardService\";\r\n import dayjs from \"dayjs\";\r\n \r\n export function useExpectedVisitors() {\r\n   const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n@@ -34,78 +34,4 @@\n   }, []);\r\n \r\n   return { expectedVisitors, loading, error };\r\n }\r\n-import { useEffect, useState } from \"react\";\r\n-import { getDashboardStats } from \"../services/\";\r\n-import dayjs from \"dayjs\";\r\n-\r\n-export function useExpectedVisitors() {\r\n-  const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState(null);\r\n-\r\n-  useEffect(() => {\r\n-    async function fetchExpected() {\r\n-      try {\r\n-        setLoading(true);\r\n-        const data = await getDashboardStats();\r\n-\r\n-        \r\n-        const now = dayjs();\r\n-        const endOfWeek = dayjs().endOf(\"week\");\r\n-\r\n-        const visitsThisWeek = data?.visits?.filter((visit) => {\r\n-          const visitDate = dayjs(visit.visit_date);\r\n-          return visitDate.isAfter(now) && visitDate.isBefore(endOfWeek);\r\n-        });\r\n-\r\n-        setExpectedVisitors(visitsThisWeek || []);\r\n-      } catch (err) {\r\n-        setError(err.message || \"Error fetching expected visitors\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    }\r\n-\r\n-    fetchExpected();\r\n-  }, []);\r\n-\r\n-  return { expectedVisitors, loading, error };\r\n-}\r\n-import { useEffect, useState } from \"react\";\r\n-import { getDashboardStats } from \"../services/dashboardService\";\r\n-import dayjs from \"dayjs\";\r\n-\r\n-export function useExpectedVisitors() {\r\n-  const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [error, setError] = useState(null);\r\n-\r\n-  useEffect(() => {\r\n-    async function fetchExpected() {\r\n-      try {\r\n-        setLoading(true);\r\n-        const data = await getDashboardStats();\r\n-\r\n-        \r\n-        const now = dayjs();\r\n-        const endOfWeek = dayjs().endOf(\"week\");\r\n-\r\n-        const visitsThisWeek = data?.visits?.filter((visit) => {\r\n-          const visitDate = dayjs(visit.visit_date);\r\n-          return visitDate.isAfter(now) && visitDate.isBefore(endOfWeek);\r\n-        });\r\n-\r\n-        setExpectedVisitors(visitsThisWeek || []);\r\n-      } catch (err) {\r\n-        setError(err.message || \"Error fetching expected visitors\");\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    }\r\n-\r\n-    fetchExpected();\r\n-  }, []);\r\n-\r\n-  return { expectedVisitors, loading, error };\r\n-}\r\n"
                },
                {
                    "date": 1753420615191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useEffect, useState } from \"react\";\r\n-import { getDashboardStatistics } from \"../services/dashboardService\";\r\n+import { getDashboardStatistics } from \"../../services/dashboardService\";\r\n import dayjs from \"dayjs\";\r\n \r\n export function useExpectedVisitors() {\r\n   const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n"
                },
                {
                    "date": 1753420627268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   useEffect(() => {\r\n     async function fetchExpected() {\r\n       try {\r\n         setLoading(true);\r\n-        const data = await getDashboardStats();\r\n+        const data = await getDashboardStatistics();\r\n \r\n         \r\n         const now = dayjs();\r\n         const endOfWeek = dayjs().endOf(\"week\");\r\n"
                },
                {
                    "date": 1753420843822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useEffect, useState } from \"react\";\r\n-import { getDashboardStatistics } from \"../../services/dashboardService\";\r\n+import { getDashboardStatistics } from \"../services/dashboardService\";\r\n import dayjs from \"dayjs\";\r\n \r\n export function useExpectedVisitors() {\r\n   const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n"
                },
                {
                    "date": 1753421445789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,35 @@\n import { useEffect, useState } from \"react\";\r\n import { getDashboardStatistics } from \"../services/dashboardService\";\r\n-import dayjs from \"dayjs\";\r\n \r\n-export function useExpectedVisitors() {\r\n+const useExpectedVisitors = () => {\r\n   const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n-  const [loading, setLoading] = useState(false);\r\n+  const [loading, setLoading] = useState(true);\r\n   const [error, setError] = useState(null);\r\n \r\n   useEffect(() => {\r\n-    async function fetchExpected() {\r\n+    const fetchExpectedVisitors = async () => {\r\n       try {\r\n         setLoading(true);\r\n         const data = await getDashboardStatistics();\r\n-\r\n-        \r\n-        const now = dayjs();\r\n-        const endOfWeek = dayjs().endOf(\"week\");\r\n-\r\n-        const visitsThisWeek = data?.visits?.filter((visit) => {\r\n-          const visitDate = dayjs(visit.visit_date);\r\n-          return visitDate.isAfter(now) && visitDate.isBefore(endOfWeek);\r\n-        });\r\n-\r\n-        setExpectedVisitors(visitsThisWeek || []);\r\n-      } catch (err) {\r\n-        setError(err.message || \"Error fetching expected visitors\");\r\n+        const visitors = data?.expected_visitors?.data || [];\r\n+        setExpectedVisitors(visitors);\r\n+      } catch (error) {\r\n+        console.error(\"Error fetching expected visitors:\", error);\r\n+        setError(\"Failed to load expected visitors\");\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n-    }\r\n+    };\r\n \r\n-    fetchExpected();\r\n+    fetchExpectedVisitors();\r\n   }, []);\r\n \r\n-  return { expectedVisitors, loading, error };\r\n-}\r\n+  return {\r\n+    expectedVisitors,\r\n+    loading,\r\n+    error,\r\n+    count: expectedVisitors.length\r\n+  };\r\n+};\r\n+\r\n+export default useExpectedVisitors;\r\n"
                },
                {
                    "date": 1753421462319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,37 @@\n import { useEffect, useState } from \"react\";\r\n import { getDashboardStatistics } from \"../services/dashboardService\";\r\n+import dayjs from \"dayjs\";\r\n \r\n-const useExpectedVisitors = () => {\r\n+export function useExpectedVisitors() {\r\n   const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n+  const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n \r\n   useEffect(() => {\r\n-    const fetchExpectedVisitors = async () => {\r\n+    async function fetchExpected() {\r\n       try {\r\n         setLoading(true);\r\n         const data = await getDashboardStatistics();\r\n-        const visitors = data?.expected_visitors?.data || [];\r\n-        setExpectedVisitors(visitors);\r\n-      } catch (error) {\r\n-        console.error(\"Error fetching expected visitors:\", error);\r\n-        setError(\"Failed to load expected visitors\");\r\n+\r\n+        \r\n+        const now = dayjs();\r\n+        const endOfWeek = dayjs().endOf(\"week\");\r\n+\r\n+        const visitsThisWeek = data?.visits?.filter((visit) => {\r\n+          const visitDate = dayjs(visit.visit_date);\r\n+          return visitDate.isAfter(now) && visitDate.isBefore(endOfWeek);\r\n+        });\r\n+\r\n+        setExpectedVisitors(visitsThisWeek || []);\r\n+      } catch (err) {\r\n+        setError(err.message || \"Error fetching expected visitors\");\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n-    };\r\n+    }\r\n \r\n-    fetchExpectedVisitors();\r\n+    fetchExpected();\r\n   }, []);\r\n \r\n-  return {\r\n-    expectedVisitors,\r\n-    loading,\r\n-    error,\r\n-    count: expectedVisitors.length\r\n-  };\r\n-};\r\n-\r\n-export default useExpectedVisitors;\r\n+  return { expectedVisitors, loading, error };\r\n+}\r\n"
                },
                {
                    "date": 1753421510250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,6 +32,12 @@\n \r\n     fetchExpected();\r\n   }, []);\r\n \r\n-  return { expectedVisitors, loading, error };\r\n+  return { stats, \r\n+    loading, \r\n+    error, \r\n+    refreshStats,\r\n+    totalVisitors: stats?.visitors?.total || 0,\r\n+    visitorData: stats?.visitors?.data || []\r\n+  }; };\r\n }\r\n"
                },
                {
                    "date": 1753421537725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,8 @@\n   return { stats, \r\n     loading, \r\n     error, \r\n     refreshStats,\r\n-    totalVisitors: stats?.visitors?.total || 0,\r\n+    expected_visitors: stats?.visitors?.total || 0,\r\n     visitorData: stats?.visitors?.data || []\r\n    };\r\n }\r\n"
                },
                {
                    "date": 1753421556774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,42 @@\n+import { useEffect, useState } from \"react\";\r\n+import { getDashboardStatistics } from \"../services/dashboardService\";\r\n+import dayjs from \"dayjs\";\r\n+\r\n+export function useExpectedVisitors() {\r\n+  const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [error, setError] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    async function fetchExpected() {\r\n+      try {\r\n+        setLoading(true);\r\n+        const data = await getDashboardStatistics();\r\n+\r\n+        \r\n+        const now = dayjs();\r\n+        const endOfWeek = dayjs().endOf(\"week\");\r\n+\r\n+        const visitsThisWeek = data?.visits?.filter((visit) => {\r\n+          const visitDate = dayjs(visit.visit_date);\r\n+          return visitDate.isAfter(now) && visitDate.isBefore(endOfWeek);\r\n+        });\r\n+\r\n+        setExpectedVisitors(visitsThisWeek || []);\r\n+      } catch (err) {\r\n+        setError(err.message || \"Error fetching expected visitors\");\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    }\r\n+\r\n+    fetchExpected();\r\n+  }, []);\r\n+\r\n+  return { stats, \r\n+    expectedVisitors,\r\n+    loading,\r\n+    error,\r\n+    count: expectedVisitors.length\r\n+   };\r\n+}\r\n"
                }
            ],
            "date": 1753419721975,
            "name": "Commit-0",
            "content": "// hooks/useExpectedVisitors.js\r\nimport { useEffect, useState } from \"react\";\r\nimport { getDashboardStats } from \"../services/visitorService\";\r\n\r\nexport default function useExpectedVisitors() {\r\n  const [expectedVisitors, setExpectedVisitors] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    async function fetchStats() {\r\n      try {\r\n        const data = await getDashboardStats();\r\n        setExpectedVisitors(data.expected_visitors || []);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch expected visitors:\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    }\r\n\r\n    fetchStats();\r\n  }, []);\r\n\r\n  return { expectedVisitors, loading };\r\n}"
        }
    ]
}